@using Picro.Client.Utils
@using Blazorise.Icons.Material
@using Picro.Client.Components.General.Flex.Enums
@using Picro.Client.Extensions
<div id="BurgerMenu" class="BurgerMenu">
	@if (!_isOpened)
	{
		<i @onclick=@ToggleBar class="material-icons MenuIcon">menu</i>
	}
	<Bar Mode="BarMode.VerticalInline"
		 CollapseMode="BarCollapseMode.Hide"
		 @ref="@_menuBar">
		<BarBrand>
			<Flex Class="BarBrand"
				  Direction="FlexDirection.Column"
				  MainAlign="FlexAlign.Center">
				<span class="BrandName">
					Picro
				</span>
				<i @onclick=@ToggleBar class="material-icons MenuIconEmbedded">menu</i>
			</Flex>
		</BarBrand>
		<BarMenu>
			<BarStart>
				<BarItem>
					<BarLink Clicked='() => OnNavLinkClicked("/")'>
						<BarIcon IconName="MaterialIcons.Home" />
						Home
					</BarLink>
				</BarItem>
				<BarItem>
					<BarLink Clicked='() => OnNavLinkClicked("/Images/Overview")'>
						<BarIcon IconName="MaterialIcons.Image" />
						Images
					</BarLink>
				</BarItem>
			</BarStart>
		</BarMenu>
	</Bar>
</div>

@code
{
	[Inject]
	public GlobalClickHandler GlobalClickHandler { get; set; } = null!;

	[Inject]
	private IJSRuntime JsRuntime { get; set; } = null!;

	[Inject]
	private NavigationManager NavManager { get; set; } = null!;

	private BoundingRect _menuBoundingRect = null!;

	private Bar _menuBar = null!;

	private bool _isOpened;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			_menuBar.Visible = false;
			StateHasChanged();
			GlobalClickHandler.OnClick += OnGlobalClick;
			await InitBoundingRect();
		}
	}

	private async Task InitBoundingRect()
	{
		var boundingRect = await JsRuntime.InvokeAsync<BoundingRect>("getComponentCoordinates", "BurgerMenu");
		_menuBoundingRect = boundingRect;
	}

	private void OnGlobalClick(object sender, MouseEventArgs eventArgs)
	{
		if (!_menuBar.Visible || _menuBoundingRect.IsWithinXBounds(eventArgs.OffsetX))
		{
			return;
		}

		_menuBar.Visible = false;
		StateHasChanged();
	}

	private void OnNavLinkClicked(string destination)
	{
		NavManager.NavigateTo(destination);
		_menuBar.Visible = false;
		StateHasChanged();
	}

	private void ToggleBar()
	{
		_menuBar.Visible = !_menuBar.Visible;
		StateHasChanged();
	}
}